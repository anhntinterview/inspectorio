import {
    FetchBaseQueryError,
    QueryDefinition,
    QueryStatus,
    SkipToken,
} from '@reduxjs/toolkit/dist/query/react';
import { Id, Override } from '@reduxjs/toolkit/dist/query/tsHelpers';
import { QuerySubState } from '@reduxjs/toolkit/dist/query/core/apiState';
import { ResultTypeFrom } from '@reduxjs/toolkit/dist/query/endpointDefinitions';
import { SerializedError } from '@reduxjs/toolkit';

export type UseQuery<T> = (
    arg: any | SkipToken,
    options?: UseQueryOptions
) => UseQueryResult<T>;

type UseQueryOptions = {
    pollingInterval?: number;
    refetchOnReconnect?: boolean;
    refetchOnFocus?: boolean;
    skip?: boolean;
    refetchOnMountOrArgChange?: boolean | number;
    selectFromResult?: (result: UseQueryStateDefaultResult<any>) => any;
};

type UseQueryResult<T> = {
    // Base query state
    originalArgs?: unknown; // Arguments passed to the query
    data?: T; // The latest returned result regardless of hook arg, if present
    currentData?: T; // The latest returned result for the current hook arg, if present
    error?: FetchBaseQueryError | SerializedError | undefined;
    // error?: unknown; // Error result if present
    requestId?: string; // A string generated by RTK Query
    endpointName?: string; // The name of the given endpoint for the query
    startedTimeStamp?: number; // Timestamp for when the query was initiated
    fulfilledTimeStamp?: number; // Timestamp for when the query was completed

    // Derived request status booleans
    isUninitialized: boolean; // Query has not started yet.
    isLoading: boolean; // Query is currently loading for the first time. No data yet.
    isFetching: boolean; // Query is currently fetching, but might have data from an earlier request.
    isSuccess: boolean; // Query has data from a successful load.
    isError: boolean; // Query is currently in an "error" state.

    refetch: () => void; // A function to force refetch the query
};

type UseQueryStateDefaultResult<D extends QueryDefinition<any, any, any, any>> =
    Id<
        | Override<
              Extract<
                  UseQueryStateBaseResult<D>,
                  {
                      status: QueryStatus.uninitialized;
                  }
              >,
              {
                  isUninitialized: true;
              }
          >
        | Override<
              UseQueryStateBaseResult<D>,
              | {
                    isLoading: true;
                    isFetching: boolean;
                    data: undefined;
                }
              | ({
                    isSuccess: true;
                    isFetching: true;
                    error: undefined;
                } & Required<
                    Pick<
                        UseQueryStateBaseResult<D>,
                        'data' | 'fulfilledTimeStamp'
                    >
                >)
              | ({
                    isSuccess: true;
                    isFetching: false;
                    error: undefined;
                } & Required<
                    Pick<
                        UseQueryStateBaseResult<D>,
                        'data' | 'fulfilledTimeStamp' | 'currentData'
                    >
                >)
              | ({
                    isError: true;
                } & Required<Pick<UseQueryStateBaseResult<D>, 'error'>>)
          >
    > & {
        /**
         * @deprecated will be removed in the next version
         * please use the `isLoading`, `isFetching`, `isSuccess`, `isError`
         * and `isUninitialized` flags instead
         */
        status: QueryStatus;
    };

type UseQueryStateBaseResult<D extends QueryDefinition<any, any, any, any>> =
    QuerySubState<D> & {
        /**
         * Where `data` tries to hold data as much as possible, also re-using
         * data from the last arguments passed into the hook, this property
         * will always contain the received data from the query, for the current query arguments.
         */
        currentData?: ResultTypeFrom<D>;
        /**
         * Query has not started yet.
         */
        isUninitialized: false;
        /**
         * Query is currently loading for the first time. No data yet.
         */
        isLoading: false;
        /**
         * Query is currently fetching, but might have data from an earlier request.
         */
        isFetching: false;
        /**
         * Query has data from a successful load.
         */
        isSuccess: false;
        /**
         * Query is currently in "error" state.
         */
        isError: false;
    };
